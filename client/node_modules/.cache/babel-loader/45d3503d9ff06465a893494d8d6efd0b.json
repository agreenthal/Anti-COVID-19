{"ast":null,"code":"import _slicedToArray from \"/Users/adamgreenthal/anti-covid19-clicker-game/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/adamgreenthal/anti-covid19-clicker-game/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/adamgreenthal/anti-covid19-clicker-game/client/src/contexts/PandemicContext.js\";\n\nimport React, { createContext, useReducer, useContext } from \"react\";\nimport { INITIAL_STATE, EASY_DIFFICULTY, MEDIUM_DIFFICULTY, HARD_DIFFICULTY, CLICKER_EFFECTS_ARRAY, CLICKER_COSTS_ARRAY, PHARMACY_EFFECTS_ARRAY, PHARMACY_COSTS_ARRAY, LABORATORY_EFFECTS_ARRAY, LABORATORY_COSTS_ARRAY, HOSPITAL_COSTS_ARRAY, DRIVETHRU_COSTS_ARRAY } from \"./constants\";\nvar tickCount = 0;\nvar PandemicContext = createContext(INITIAL_STATE);\nvar Provider = PandemicContext.Provider;\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case \"USER_LOGIN\":\n      return _objectSpread({}, state, {\n        token: action.token,\n        player: action.player\n      });\n\n    case \"SET_EASY_DIFFICULTY\":\n      return _objectSpread({}, state, {\n        difficulty: \"easy\",\n        status: EASY_DIFFICULTY\n      });\n\n    case \"SET_MEDIUM_DIFFICULTY\":\n      return _objectSpread({}, state, {\n        difficulty: \"medium\",\n        status: MEDIUM_DIFFICULTY\n      });\n\n    case \"SET_HARD_DIFFICULTY\":\n      return _objectSpread({}, state, {\n        difficulty: \"hard\",\n        status: HARD_DIFFICULTY\n      });\n\n    case \"CLICK\":\n      return _objectSpread({}, state, {\n        status: {\n          infected: state.status.infected - state.clicker.effect,\n          death: state.status.death,\n          fund: state.status.fund + state.clicker.effect * state.clicker.profit\n        }\n      });\n    // Summary:\n    // Every 15 ticks: DEATH\n    // Every 10 ticks: LABORATORY\n    // Every 5 ticks: PHARMACY\n    // Every 1 tick: SPREAD\n\n    case \"TICK\":\n      tickCount++;\n\n      if (state.isComplete) {\n        return _objectSpread({}, state);\n      } // Every 15 ticks\n      // Effects from SPREAD + DEATH + PHARMACY\n      else if (!(tickCount % 15)) {\n          return _objectSpread({}, state, {\n            status: {\n              infected: parseInt(state.status.infected * state.rates.spreadRate) - state.pharmacy.effect,\n              death: state.status.death + parseInt(state.status.infected * state.rates.deathRate),\n              fund: state.status.fund + state.pharmacy.effect * state.pharmacy.profit\n            }\n          });\n        } // Every 10 ticks\n        // Effects from SPREAD + LABORATORY + PHARMACY\n        else if (!(tickCount % 10)) {\n            return _objectSpread({}, state, {\n              status: {\n                infected: parseInt(state.status.infected * state.rates.spreadRate) - state.pharmacy.effect - state.laboratory.effect,\n                death: state.status.death,\n                fund: state.status.fund + state.pharmacy.effect * state.pharmacy.profit + state.laboratory.effect * state.laboratory.profit\n              }\n            });\n          } // Every 5 ticks\n          // Effects from SPREAD + PHARMACY\n          else if (!(tickCount % 5)) {\n              return _objectSpread({}, state, {\n                status: {\n                  infected: parseInt(state.status.infected * state.rates.spreadRate) - state.pharmacy.effect,\n                  death: state.status.death,\n                  fund: state.status.fund + state.pharmacy.effect * state.pharmacy.profit\n                }\n              });\n            } // Every tick\n            // Effect from SPREAD\n            else {\n                return _objectSpread({}, state, {\n                  status: {\n                    infected: parseInt(state.status.infected * state.rates.spreadRate),\n                    death: state.status.death,\n                    fund: state.status.fund\n                  }\n                });\n              }\n\n      ;\n    // When clicker levels, it should increment clicker level,\n    //  & update the clicker.effect accordingly\n\n    case \"CLICKER_LEVEL_UP\":\n      // Since array starts at index 0, we can get the next clicker effect,\n      // by simply passing current clicker level\n      //\n      // if( leve is max ) - ADD LATER\n      //\n      var newClickerEffect = CLICKER_EFFECTS_ARRAY[state.clicker.level];\n      var newClickerCost = CLICKER_COSTS_ARRAY[state.clicker.level + 1];\n      var newFundC = state.status.fund - state.clicker.cost;\n      return _objectSpread({}, state, {\n        status: {\n          infected: state.status.infected,\n          death: state.status.death,\n          fund: newFundC\n        },\n        clicker: {\n          level: state.clicker.level + 1,\n          effect: newClickerEffect,\n          profit: state.clicker.profit,\n          cost: newClickerCost\n        }\n      });\n\n    case \"PHARMACY_LEVEL_UP\":\n      var newPharmacyEffect = PHARMACY_EFFECTS_ARRAY[state.pharmacy.level];\n      var newPharmacyCost = PHARMACY_COSTS_ARRAY[state.pharmacy.level + 1];\n      var newFundP = state.status.fund - state.pharmacy.cost;\n      return _objectSpread({}, state, {\n        status: {\n          infected: state.status.infected,\n          death: state.status.death,\n          fund: newFundP\n        },\n        pharmacy: {\n          level: state.pharmacy.level + 1,\n          effect: newPharmacyEffect,\n          profit: state.pharmacy.profit,\n          cost: newPharmacyCost\n        }\n      });\n\n    case \"LABORATORY_LEVEL_UP\":\n      var newLaboratoryEffect = LABORATORY_EFFECTS_ARRAY[state.laboratory.level];\n      var newLaboratoryCost = LABORATORY_COSTS_ARRAY[state.laboratory.level + 1];\n      var newFundL = state.status.fund - state.laboratory.cost;\n      return _objectSpread({}, state, {\n        status: {\n          infected: state.status.infected,\n          death: state.status.death,\n          fund: newFundL\n        },\n        laboratory: {\n          level: state.laboratory.level + 1,\n          effect: newLaboratoryEffect,\n          profit: state.laboratory.profit,\n          cost: newLaboratoryCost\n        }\n      });\n\n    case \"HOSPITAL_LEVEL_UP\":\n      var newHospitalCost = HOSPITAL_COSTS_ARRAY[state.hospital.level + 1];\n      var newFundH = state.status.fund - state.hospital.cost;\n      return _objectSpread({}, state, {\n        status: {\n          infected: state.status.infected,\n          death: state.status.death,\n          fund: newFundH\n        },\n        rates: {\n          spreadRate: state.rates.spreadRate,\n          deathRate: state.rates.deathRate - 0.0003\n        },\n        hospital: {\n          level: state.hospital.level + 1,\n          cost: newHospitalCost\n        }\n      });\n\n    case \"DRIVE_THRU_LEVEL_UP\":\n      var newDrivethruCost = DRIVETHRU_COSTS_ARRAY[state.drivethru.level + 1];\n      var newFundD = state.status.fund - state.drivethru.cost;\n      return _objectSpread({}, state, {\n        status: {\n          infected: state.status.infected,\n          death: state.status.death,\n          fund: newFundD\n        },\n        rates: {\n          spreadRate: state.rates.spreadRate - 0.003,\n          deathRate: state.rates.deathRate\n        },\n        drivethru: {\n          level: state.drivethru.level + 1,\n          cost: newDrivethruCost\n        }\n      });\n    // Winning Condition Met\n\n    case \"WIN\":\n      return _objectSpread({}, state, {\n        isComplete: true,\n        won: true\n      });\n    // Losing Condition Met\n\n    case \"LOST\":\n      return _objectSpread({}, state, {\n        isComplete: true\n      });\n\n    case \"QUIT\":\n      return _objectSpread({}, state, {\n        token: null,\n        player: null\n      });\n\n    default:\n      throw new Error(\"Invalid action type: \".concat(action.type));\n  }\n};\n\nvar PandemicProvider = function PandemicProvider(props) {\n  var _useReducer = useReducer(reducer, INITIAL_STATE),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  return /*#__PURE__*/React.createElement(Provider, {\n    value: [state, dispatch],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 10\n    }\n  }, props.children);\n};\n\nvar usePandemicContext = function usePandemicContext() {\n  return useContext(PandemicContext);\n};\n\nexport { PandemicProvider, usePandemicContext };","map":{"version":3,"sources":["/Users/adamgreenthal/anti-covid19-clicker-game/client/src/contexts/PandemicContext.js"],"names":["React","createContext","useReducer","useContext","INITIAL_STATE","EASY_DIFFICULTY","MEDIUM_DIFFICULTY","HARD_DIFFICULTY","CLICKER_EFFECTS_ARRAY","CLICKER_COSTS_ARRAY","PHARMACY_EFFECTS_ARRAY","PHARMACY_COSTS_ARRAY","LABORATORY_EFFECTS_ARRAY","LABORATORY_COSTS_ARRAY","HOSPITAL_COSTS_ARRAY","DRIVETHRU_COSTS_ARRAY","tickCount","PandemicContext","Provider","reducer","state","action","type","token","player","difficulty","status","infected","clicker","effect","death","fund","profit","isComplete","parseInt","rates","spreadRate","pharmacy","deathRate","laboratory","newClickerEffect","level","newClickerCost","newFundC","cost","newPharmacyEffect","newPharmacyCost","newFundP","newLaboratoryEffect","newLaboratoryCost","newFundL","newHospitalCost","hospital","newFundH","newDrivethruCost","drivethru","newFundD","won","Error","PandemicProvider","props","dispatch","children","usePandemicContext"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer, useContext } from \"react\";\nimport {\n  INITIAL_STATE,\n  EASY_DIFFICULTY,\n  MEDIUM_DIFFICULTY,\n  HARD_DIFFICULTY,\n  CLICKER_EFFECTS_ARRAY,\n  CLICKER_COSTS_ARRAY,\n  PHARMACY_EFFECTS_ARRAY,\n  PHARMACY_COSTS_ARRAY,\n  LABORATORY_EFFECTS_ARRAY,\n  LABORATORY_COSTS_ARRAY,\n  HOSPITAL_COSTS_ARRAY,\n  DRIVETHRU_COSTS_ARRAY\n} from \"./constants\";\n\nlet tickCount = 0;\n\nconst PandemicContext = createContext(INITIAL_STATE);\nconst { Provider } = PandemicContext;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"USER_LOGIN\":\n      return {\n        ...state,\n        token: action.token,\n        player: action.player\n      }\n    case \"SET_EASY_DIFFICULTY\":\n      return {\n        ...state,\n        difficulty: \"easy\",\n        status: EASY_DIFFICULTY\n      };\n    case \"SET_MEDIUM_DIFFICULTY\":\n      return {\n        ...state,\n        difficulty: \"medium\",\n        status: MEDIUM_DIFFICULTY\n      };\n    case \"SET_HARD_DIFFICULTY\":\n      return {\n        ...state,\n        difficulty: \"hard\",\n        status: HARD_DIFFICULTY\n      };\n\n    case \"CLICK\":\n      return {\n        ...state,\n        status: {\n          infected: state.status.infected - state.clicker.effect,\n          death: state.status.death,\n          fund: state.status.fund + (state.clicker.effect * state.clicker.profit)\n        }\n      }\n\n    // Summary:\n    // Every 15 ticks: DEATH\n    // Every 10 ticks: LABORATORY\n    // Every 5 ticks: PHARMACY\n    // Every 1 tick: SPREAD\n    case \"TICK\":\n      tickCount++;\n      if (state.isComplete) {\n        return {\n          ...state\n        }\n      }\n      // Every 15 ticks\n      // Effects from SPREAD + DEATH + PHARMACY\n      else if (!(tickCount % 15)) {\n        return {\n          ...state,\n          status: {\n            infected: parseInt(state.status.infected * state.rates.spreadRate) - state.pharmacy.effect,\n            death: state.status.death + parseInt(state.status.infected * state.rates.deathRate),\n            fund: state.status.fund + (state.pharmacy.effect * state.pharmacy.profit)\n          }\n        }\n      }\n      // Every 10 ticks\n      // Effects from SPREAD + LABORATORY + PHARMACY\n      else if (!(tickCount % 10)) {\n\n        return {\n          ...state,\n          status: {\n            infected: parseInt(state.status.infected * state.rates.spreadRate) - state.pharmacy.effect - state.laboratory.effect,\n            death: state.status.death,\n            fund: state.status.fund + (state.pharmacy.effect * state.pharmacy.profit) + (state.laboratory.effect * state.laboratory.profit)\n          }\n        }\n\n      }\n      // Every 5 ticks\n      // Effects from SPREAD + PHARMACY\n      else if (!(tickCount % 5)) {\n        return {\n          ...state,\n          status: {\n            infected: parseInt(state.status.infected * state.rates.spreadRate) - state.pharmacy.effect,\n            death: state.status.death,\n            fund: state.status.fund + (state.pharmacy.effect * state.pharmacy.profit)\n          }\n        }\n      }\n      // Every tick\n      // Effect from SPREAD\n      else {\n        return {\n          ...state,\n          status: {\n            infected: parseInt(state.status.infected * state.rates.spreadRate),\n            death: state.status.death,\n            fund: state.status.fund\n          }\n        }\n      };\n\n    // When clicker levels, it should increment clicker level,\n    //  & update the clicker.effect accordingly\n    case \"CLICKER_LEVEL_UP\":\n      // Since array starts at index 0, we can get the next clicker effect,\n      // by simply passing current clicker level\n\n      //\n      // if( leve is max ) - ADD LATER\n      //\n\n      let newClickerEffect = CLICKER_EFFECTS_ARRAY[state.clicker.level];\n      let newClickerCost = CLICKER_COSTS_ARRAY[state.clicker.level+1];\n      let newFundC = state.status.fund - state.clicker.cost;\n\n      return {\n        ...state,\n        status: {\n          infected: state.status.infected,\n          death: state.status.death,\n          fund: newFundC\n        },\n        clicker: {\n          level: state.clicker.level + 1,\n          effect: newClickerEffect,\n          profit: state.clicker.profit,\n          cost: newClickerCost\n        }\n      };\n\n    case \"PHARMACY_LEVEL_UP\":\n      let newPharmacyEffect = PHARMACY_EFFECTS_ARRAY[state.pharmacy.level];\n      let newPharmacyCost = PHARMACY_COSTS_ARRAY[state.pharmacy.level+1];\n      let newFundP = state.status.fund - state.pharmacy.cost;\n\n      return {\n        ...state,\n        status: {\n          infected: state.status.infected,\n          death: state.status.death,\n          fund: newFundP\n        },\n        pharmacy: {\n          level: state.pharmacy.level + 1,\n          effect: newPharmacyEffect,\n          profit: state.pharmacy.profit,\n          cost: newPharmacyCost\n        }\n      };\n\n    case \"LABORATORY_LEVEL_UP\":\n      let newLaboratoryEffect = LABORATORY_EFFECTS_ARRAY[state.laboratory.level];\n      let newLaboratoryCost = LABORATORY_COSTS_ARRAY[state.laboratory.level+1];\n      let newFundL = state.status.fund - state.laboratory.cost;\n\n      return {\n        ...state,\n        status: {\n          infected: state.status.infected,\n          death: state.status.death,\n          fund: newFundL\n        },\n        laboratory: {\n          level: state.laboratory.level + 1,\n          effect: newLaboratoryEffect,\n          profit: state.laboratory.profit,\n          cost: newLaboratoryCost\n        }\n      }\n\n    case \"HOSPITAL_LEVEL_UP\":\n      let newHospitalCost = HOSPITAL_COSTS_ARRAY[state.hospital.level+1];\n      let newFundH = state.status.fund - state.hospital.cost;\n\n      return {\n        ...state,\n        status: {\n          infected: state.status.infected,\n          death: state.status.death,\n          fund: newFundH\n        },\n        rates: {\n          spreadRate: state.rates.spreadRate,\n          deathRate: state.rates.deathRate - 0.0003\n        },\n        hospital: {\n          level: state.hospital.level + 1,\n          cost: newHospitalCost\n        }\n      }\n\n    case \"DRIVE_THRU_LEVEL_UP\":\n      let newDrivethruCost = DRIVETHRU_COSTS_ARRAY[state.drivethru.level+1];\n      let newFundD = state.status.fund - state.drivethru.cost;\n\n      return {\n        ...state,\n        status: {\n          infected: state.status.infected,\n          death: state.status.death,\n          fund: newFundD\n        },\n        rates: {\n          spreadRate: state.rates.spreadRate - 0.003,\n          deathRate: state.rates.deathRate\n        },\n        drivethru: {\n          level: state.drivethru.level + 1,\n          cost: newDrivethruCost\n        }\n      }\n\n    // Winning Condition Met\n    case \"WIN\":\n      return {\n        ...state,\n        isComplete: true,\n        won: true\n      }\n    // Losing Condition Met\n    case \"LOST\":\n      return {\n        ...state,\n        isComplete: true,\n      }\n\n    case \"QUIT\":\n      return {\n        ...state,\n        token: null,\n        player: null\n      };\n\n    default:\n      throw new Error(`Invalid action type: ${action.type}`);\n  }\n};\n\nconst PandemicProvider = (props) => {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  return <Provider value={[state, dispatch]}>\n    {props.children}\n  </Provider>;\n};\n\nconst usePandemicContext = () => {\n  return useContext(PandemicContext);\n};\n\nexport { PandemicProvider, usePandemicContext };\n"]},"metadata":{},"sourceType":"module"}